import { useState } from "react";
import Head from "next/head";
import Image from "next/image";
import { Button, Modal, Group, Text, Alert, Stack } from "@mantine/core";
import { Dropzone } from "@mantine/dropzone";
import { config } from "@/config";
import { IconUpload, IconPhoto, IconX } from "@tabler/icons";
import { IconAlertCircle } from "@tabler/icons";
import { useFullScreen } from "@/lib/hook";
import { parse } from "@/lib/csv";
import TitleWithLogo from "@/components/TitleWithLogo";
import { FilePreview } from "@/components/Preview";
import { isNumeric } from "@/lib/utils";
import { Footer } from "@/components/Footer";

export default function Home() {
  const [showUpload, setShowUpload] = useState(false);
  const [uploading, setUploading] = useState(false);
  const [errMsg, setErrMsg] = useState("");
  const [content, setContent] = useState("");
  const [filename, setFilename] = useState("");
  const [columns, setColumns] = useState<any[] | null>();

  useFullScreen();

  const upload = async (files: File[]) => {
    if (!files?.[0]) {
      return;
    }

    const reader = new FileReader();
    reader.onload = async () => {
      setErrMsg("");
      const content = reader.result as string;
      let columns: any[], data: any;
      try {
        [columns, data] = await parse(content);
      } catch (e) {
        [columns, data] = await parse(content, { delimiter: ";" });
      }

      if (columns.some((i) => isNumeric(i))) {
        setErrMsg("It seems this file does not contain valid header");
        setUploading(false);
        return;
      }

      setContent(content);
      setFilename(files[0].name);

      fetch("/api/columns", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          sample_data: [
            columns
              .map((i, index) => ({ [i]: data[0][index] }))
              .reduce((acc, next) => ({ ...acc, ...next }), {}),
          ],
        }),
      })
        .then((res) => res.json())
        .then((res) => {
          if (res.code !== 200) {
            setErrMsg(res.message || "Error occurred");
            return;
          }
          setColumns(res.columns);
        })
        .catch((err) => setErrMsg(err.message || "Error occurred"))
        .finally(() => {
          setUploading(false);
        });
    };
    reader.onerror = () => {
      setUploading(false);
    };

    reader.readAsText(files[0]);
    setUploading(true);
  };

  return (
    <>
      <Head>
        <title>{config.title}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={"main"}>
        <TitleWithLogo />

        <div className={"content"}>
          <div className={"block"}>
            <div className={"subTitle"}>
              <Image
                src="/upload.svg"
                alt="Upload"
                width={32}
                height={32}
                className={"titleIcon"}
              />
              Step 1. Upload a CSV file
            </div>
            <div className={"paragraph"}>
              Upload a CSV file, then ask questions by natural language
            </div>
            <Button
              style={{ marginBottom: 24 }}
              onClick={() => setShowUpload(true)}
            >
              Explore any dataset
            </Button>
            <div className={"paragraph"}>
              Don&apos;t have a CSV file? You can try our sample dataset about
              fortune 500
            </div>
            <Button
              variant="light"
              onClick={() =>
                (window.location.href = `https://fortune500.vercel.app/`)
              }
            >
              Explore fortune 500
            </Button>
          </div>
          <div className={"line"}></div>
          <div className={"block"}>
            <div className={"subTitle"}>
              <Image
                src="/ai.svg"
                alt="Upload"
                width={32}
                height={32}
                className={"titleIcon"}
              />
              Step 2. Ask questions from it
            </div>
            <div className={"preview"}>
              <Image
                src="/demo.gif"
                alt="demo"
                fill
                style={{ border: `1px solid #DFDFDF`, objectFit: "contain" }}
              />
            </div>
          </div>
        </div>

        <Footer className="footer" />
      </main>

      <Modal
        size="xl"
        opened={showUpload}
        onClose={() => setShowUpload(false)}
        title={
          <div>
            <h2>Explore your own dataset!</h2>
            {columns && (
              <p>Please give us some information about your column names.</p>
            )}
          </div>
        }
      >
        <Stack>
          {errMsg && (
            <Alert
              title="Error"
              icon={<IconAlertCircle size={16} />}
              color="red"
            >
              {errMsg}
            </Alert>
          )}

          {columns ? (
            <FilePreview
              columns={columns}
              content={content}
              name={filename}
              onCancel={() => {
                setShowUpload(false);
                setFilename("");
                setColumns(null);
                setContent("");
              }}
            />
          ) : (
            <Dropzone
              onDrop={(files) => upload(files)}
              onReject={(files) => console.log("rejected files", files)}
              accept={{ "text/csv": [".csv"] }}
              maxSize={1 * 1024 ** 2}
              loading={uploading}
            >
              <Group
                position="center"
                spacing="xl"
                style={{ minHeight: 220, pointerEvents: "none" }}
              >
                <Dropzone.Accept>
                  <IconUpload size={50} stroke={1.5} />
                </Dropzone.Accept>
                <Dropzone.Reject>
                  <IconX size={50} stroke={1.5} />
                </Dropzone.Reject>
                <Dropzone.Idle>
                  <IconPhoto size={50} stroke={1.5} />
                </Dropzone.Idle>
                <div>
                  <Text size="xl" inline>
                    Drag the CSV file here or click to select one CSV file
                  </Text>
                  <Text size="sm" color="dimmed" inline mt={7}>
                    Attach only one file please, do not exceed 1mb
                  </Text>
                </div>
              </Group>
            </Dropzone>
          )}
        </Stack>
      </Modal>
    </>
  );
}
